/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/robel-yemane/snowball-controller/pkg/apis/snowballresource/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnowballResourceLister helps list SnowballResources.
type SnowballResourceLister interface {
	// List lists all SnowballResources in the indexer.
	List(selector labels.Selector) (ret []*v1.SnowballResource, err error)
	// SnowballResources returns an object that can list and get SnowballResources.
	SnowballResources(namespace string) SnowballResourceNamespaceLister
	SnowballResourceListerExpansion
}

// snowballResourceLister implements the SnowballResourceLister interface.
type snowballResourceLister struct {
	indexer cache.Indexer
}

// NewSnowballResourceLister returns a new SnowballResourceLister.
func NewSnowballResourceLister(indexer cache.Indexer) SnowballResourceLister {
	return &snowballResourceLister{indexer: indexer}
}

// List lists all SnowballResources in the indexer.
func (s *snowballResourceLister) List(selector labels.Selector) (ret []*v1.SnowballResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnowballResource))
	})
	return ret, err
}

// SnowballResources returns an object that can list and get SnowballResources.
func (s *snowballResourceLister) SnowballResources(namespace string) SnowballResourceNamespaceLister {
	return snowballResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnowballResourceNamespaceLister helps list and get SnowballResources.
type SnowballResourceNamespaceLister interface {
	// List lists all SnowballResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SnowballResource, err error)
	// Get retrieves the SnowballResource from the indexer for a given namespace and name.
	Get(name string) (*v1.SnowballResource, error)
	SnowballResourceNamespaceListerExpansion
}

// snowballResourceNamespaceLister implements the SnowballResourceNamespaceLister
// interface.
type snowballResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnowballResources in the indexer for a given namespace.
func (s snowballResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.SnowballResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnowballResource))
	})
	return ret, err
}

// Get retrieves the SnowballResource from the indexer for a given namespace and name.
func (s snowballResourceNamespaceLister) Get(name string) (*v1.SnowballResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("snowballresource"), name)
	}
	return obj.(*v1.SnowballResource), nil
}
